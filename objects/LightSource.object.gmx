<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// sets defaults in case they're not specified (they should always be specified though)
radius = 320;
color = make_color_hsv(random(255), 255, 255);
intensity = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_blend_mode(bm_add);

draw_set_alpha(0.1);
draw_circle_color(x, y, radius, color, c_black, 0);
draw_set_alpha(1);

with(objPlayer)
{
    if(point_distance(x, y, other.x, other.y) &lt;= other.radius)
    {
        // Draw tank parts illuminated
        var _sprNum = sprite_get_number(sprTankTreadIllum);
        var _factor = 360/_sprNum;
        if(scale)
        {
            var _illumRot = _sprNum + round(point_direction(x, y, other.x, other.y)/_factor)-3;
        }
        else
        {
            var _illumRot = _sprNum - round(point_direction(x, y, other.x, other.y)/_factor)+1;
        }
        var dist = abs(1-point_distance(x, y, other.x, other.y)/other.radius);
        draw_sprite_ext(sprTankTreadIllum, _illumRot, x, y + (sprite_get_height(sprTankTread) / 2) + 12, image_xscale, image_yscale, image_angle, other.color, dist*other.intensity);
        draw_sprite_ext(sprTankHeadpieceIllum, _illumRot, x, y - (sprite_get_height(sprTankHeadpiece) / 2) - 18 + add, scale, 1, add + rot, other.color, dist*other.intensity);
        draw_sprite_ext(sprTankBodyIllum, _illumRot, x + add, y, scale, 1, add + rot, other.color, dist*other.intensity);
        window_set_caption(string(dist));
    }
}

draw_set_blend_mode(bm_normal);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
